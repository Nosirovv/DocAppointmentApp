package uz.devops.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MedicalRecordAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicalRecordAllPropertiesEquals(MedicalRecord expected, MedicalRecord actual) {
        assertMedicalRecordAutoGeneratedPropertiesEquals(expected, actual);
        assertMedicalRecordAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicalRecordAllUpdatablePropertiesEquals(MedicalRecord expected, MedicalRecord actual) {
        assertMedicalRecordUpdatableFieldsEquals(expected, actual);
        assertMedicalRecordUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicalRecordAutoGeneratedPropertiesEquals(MedicalRecord expected, MedicalRecord actual) {
        assertThat(expected)
            .as("Verify MedicalRecord auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicalRecordUpdatableFieldsEquals(MedicalRecord expected, MedicalRecord actual) {
        assertThat(expected)
            .as("Verify MedicalRecord relevant properties")
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getSicknessInfo()).as("check sicknessInfo").isEqualTo(actual.getSicknessInfo()))
            .satisfies(e -> assertThat(e.getTreatmentInto()).as("check treatmentInto").isEqualTo(actual.getTreatmentInto()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicalRecordUpdatableRelationshipsEquals(MedicalRecord expected, MedicalRecord actual) {
        assertThat(expected)
            .as("Verify MedicalRecord relationships")
            .satisfies(e -> assertThat(e.getDoctor()).as("check doctor").isEqualTo(actual.getDoctor()))
            .satisfies(e -> assertThat(e.getHistory()).as("check history").isEqualTo(actual.getHistory()));
    }
}
